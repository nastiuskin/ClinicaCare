@using Application.UserAccountManagement.Doctors.DTO
@using Application.UserAccountManagement.UserDtos
@using ClinicaCare.Client.Services.Interfaces
@using Domain.Users.Doctors
@using MudBlazor
@inject IUserService UserService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <EditForm Model="@DoctorData" OnValidSubmit="Save">
            <DataAnnotationsValidator />
            <MudGrid>
                <!-- First Name -->
                <MudItem xs="12">
                    <MudTextField Label="First Name" @bind-Value="DoctorData.FirstName"/>
                    <ValidationMessage For="@(() => DoctorData.FirstName)" />
                </MudItem>

                <!-- Last Name -->
                <MudItem xs="12">
                    <MudTextField Label="Last Name" @bind-Value="DoctorData.LastName"/><ConfirmationDialog />
                    <ValidationMessage For="@(() => DoctorData.LastName)" />
                </MudItem>

                <!-- Email -->
                <MudItem xs="12">
                    <MudTextField Label="Email" @bind-Value="DoctorData.Email"/>
                    <ValidationMessage For="@(() => DoctorData.Email)" />
                </MudItem>

                <!-- Phone Number -->
                <MudItem xs="12">
                    <MudTextField Label="Phone Number" @bind-Value="DoctorData.PhoneNumber"/>
                    <ValidationMessage For="@(() => DoctorData.PhoneNumber)" />
                </MudItem>

                <!-- Date of Birth -->
                <MudItem xs="12">
                    <MudTextField Label="Date of Birth (dd.MM.yyyy)" @bind-Value="DoctorData.DateOfBirth"/>
                    <ValidationMessage For="@(() => DoctorData.DateOfBirth)" />
                </MudItem>

                <MudItem xs="12">
                    <MudSelect Label="Type" @bind-Value="DoctorData.Specialization">
                        @foreach (var type in Enum.GetValues(typeof(SpecializationType)).Cast<SpecializationType>())
                        {
                            <MudSelectItem Value="@type">@type.ToString()</MudSelectItem>
                        }
                    </MudSelect>
                    <ValidationMessage For="@(() => DoctorData.Specialization)" />
                </MudItem>

                <!-- Biography -->
                <MudItem xs="12">
                    <MudTextField Label="Biography" @bind-Value="DoctorData.Biography" />
                </MudItem>

                <!-- Cabinet Number -->
                <MudItem xs="12">
                    <MudTextField Label="Cabinet Number" @bind-Value="DoctorData.CabinetNumber" />
                    <ValidationMessage For="@(() => DoctorData.CabinetNumber)" />
                </MudItem>

                <!-- Working Hours Start -->
                <MudItem xs="12">
                    <MudTextField Label="Working Hours Start" @bind-Value="DoctorData.WorkingHoursStart" />
                    <ValidationMessage For="@(() => DoctorData.WorkingHoursStart)" />
                </MudItem>

                <!-- Working Hours End -->
                <MudItem xs="12">
                    <MudTextField Label="Working Hours End" @bind-Value="DoctorData.WorkingHoursEnd" />
                    <ValidationMessage For="@(() => DoctorData.WorkingHoursEnd)" />
                </MudItem>
            </MudGrid>

            <!-- Password -->
            <MudItem xs="12">
                <MudTextField Label="Password" InputType="InputType.Password" @bind-Value="DoctorData.Password" />
                <ValidationMessage For="@(() => DoctorData.Password)" />
            </MudItem>

            <!-- Confirm Password -->
            <MudItem xs="12">
                <MudTextField Label="Confirm Password" InputType="InputType.Password" @bind-Value="DoctorData.ConfirmPassword" />
                <ValidationMessage For="@(() => DoctorData.ConfirmPassword)" />
            </MudItem>

            <!-- Action Buttons -->
            <MudGrid>
                <MudItem xs="6">
                    <MudButton OnClick="Cancel" Color="Color.Secondary">Cancel</MudButton>
                </MudItem>
                <MudItem xs="6">
                    <MudButton ButtonType="ButtonType.Submit" OnClick="Save" Color="Color.Primary">Create</MudButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    </DialogContent>
</MudDialog>

@if (errors != null && errors.Length > 0)
{
    <MudAlert Severity="Severity.Error" Style="margin-top: 20px;">
        @foreach (var error in errors)
        {
            <div>@error</div>
        }
    </MudAlert>
}
else if (success)
{
    <MudAlert Severity="Severity.Success" Style="margin-top: 20px;">
        Doctor successfully created!
    </MudAlert>
}

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    private DoctorFormDto DoctorData = new();
    private bool success;
    private string[] errors = { };

    private async Task Save()
    {
        var result = await UserService.CreateDoctorAsync(DoctorData);
        if (result)
        {
            success = true;
            Snackbar.Add("Doctor created successfully.", Severity.Success);
            MudDialog.Close(DialogResult.Ok(DoctorData));
        }
        }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}

